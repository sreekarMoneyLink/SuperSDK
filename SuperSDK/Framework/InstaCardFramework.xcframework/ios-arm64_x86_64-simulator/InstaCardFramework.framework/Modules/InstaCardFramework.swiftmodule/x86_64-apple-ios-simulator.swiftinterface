// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 6.0.2 effective-5.10 (swiftlang-6.0.2.1.2 clang-1600.0.26.4)
// swift-module-flags: -target x86_64-apple-ios13.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -enable-bare-slash-regex -module-name InstaCardFramework
@_exported import Alamofire
import CoreGraphics
import DeveloperToolsSupport
import Foundation
import HyperKYC
@_exported import InstaCardFramework
import Swift
import SwiftOTP
import SwiftUI
import UIKit
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor @preconcurrency open class DropDown : UIKit.UITextField {
  @_Concurrency.MainActor @preconcurrency public var selectedIndex: Swift.Int?
  @_Concurrency.MainActor @preconcurrency public var selectedSection: Swift.Int?
  @_Concurrency.MainActor @preconcurrency public var numberOfSections: Swift.Int
  @_Concurrency.MainActor @preconcurrency public var scrollToSelectedIndex: Swift.Bool
  @_Concurrency.MainActor @preconcurrency public var selectedTextColor: UIKit.UIColor
  @objc @IBInspectable @_Concurrency.MainActor @preconcurrency public var rowHeight: CoreFoundation.CGFloat
  @objc @IBInspectable @_Concurrency.MainActor @preconcurrency public var rowBackgroundColor: UIKit.UIColor
  @objc @IBInspectable @_Concurrency.MainActor @preconcurrency public var rowTextColor: UIKit.UIColor
  @objc @IBInspectable @_Concurrency.MainActor @preconcurrency public var selectedRowColor: UIKit.UIColor
  @objc @IBInspectable @_Concurrency.MainActor @preconcurrency public var hideOptionsWhenSelect: Swift.Bool
  @objc @IBInspectable @_Concurrency.MainActor @preconcurrency public var isSearchEnable: Swift.Bool {
    @objc get
    @objc set
  }
  @objc @IBInspectable @_Concurrency.MainActor @preconcurrency public var borderColor: UIKit.UIColor {
    @objc get
    @objc set
  }
  @objc @IBInspectable @_Concurrency.MainActor @preconcurrency public var listHeight: CoreFoundation.CGFloat {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor @preconcurrency public var optionArray: [Swift.String] {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var optionheadersArray: [Swift.String] {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var majorCities: [Swift.String] {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var sectionsRequired: Swift.Int {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var hideArrow: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var optionImageArray: [Swift.String] {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var optionIds: [Swift.Int]?
  @objc @IBInspectable @_Concurrency.MainActor @preconcurrency public var arrowSize: CoreFoundation.CGFloat {
    @objc get
    @objc set
  }
  @objc @IBInspectable @_Concurrency.MainActor @preconcurrency public var arrowColor: UIKit.UIColor {
    @objc get
    @objc set
  }
  @objc @IBInspectable @_Concurrency.MainActor @preconcurrency public var checkMarkEnabled: Swift.Bool {
    @objc get
    @objc set
  }
  @objc @IBInspectable @_Concurrency.MainActor @preconcurrency public var handleKeyboard: Swift.Bool {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init(coder aDecoder: Foundation.NSCoder)
  @objc deinit
  @_Concurrency.MainActor @preconcurrency public func showList()
  @_Concurrency.MainActor @preconcurrency public func hideList()
  @objc @_Concurrency.MainActor @preconcurrency public func touchAction()
  @_Concurrency.MainActor @preconcurrency public func didSelect(completion: @escaping (_ selectedText: Swift.String, _ index: Swift.Int, _ id: Swift.Int) -> ())
  @_Concurrency.MainActor @preconcurrency public func listWillAppear(completion: @escaping () -> ())
  @_Concurrency.MainActor @preconcurrency public func listDidAppear(completion: @escaping () -> ())
  @_Concurrency.MainActor @preconcurrency public func listWillDisappear(completion: @escaping () -> ())
  @_Concurrency.MainActor @preconcurrency public func listDidDisappear(completion: @escaping () -> ())
}
extension InstaCardFramework.DropDown : UIKit.UITextFieldDelegate {
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func textFieldShouldReturn(_ textField: UIKit.UITextField) -> Swift.Bool
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func textFieldDidBeginEditing(_ textField: UIKit.UITextField)
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func textFieldShouldBeginEditing(_ textField: UIKit.UITextField) -> Swift.Bool
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func textField(_ textField: UIKit.UITextField, shouldChangeCharactersIn range: Foundation.NSRange, replacementString string: Swift.String) -> Swift.Bool
}
extension InstaCardFramework.DropDown : UIKit.UITableViewDataSource {
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func numberOfSections(in tableView: UIKit.UITableView) -> Swift.Int
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func tableView(_ tableView: UIKit.UITableView, numberOfRowsInSection section: Swift.Int) -> Swift.Int
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func tableView(_ tableView: UIKit.UITableView, heightForHeaderInSection section: Swift.Int) -> CoreFoundation.CGFloat
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func tableView(_ tableView: UIKit.UITableView, viewForHeaderInSection section: Swift.Int) -> UIKit.UIView?
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func tableView(_ tableView: UIKit.UITableView, cellForRowAt indexPath: Foundation.IndexPath) -> UIKit.UITableViewCell
}
extension InstaCardFramework.DropDown : UIKit.UITableViewDelegate {
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func tableView(_ tableView: UIKit.UITableView, didSelectRowAt indexPath: Foundation.IndexPath)
}
@_hasMissingDesignatedInitializers open class DatePickerDialog {
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @IBDesignable @_Concurrency.MainActor @preconcurrency public class JKCircleView : UIKit.UIView {
  @objc @IBInspectable @_Concurrency.MainActor @preconcurrency public var lineWidth: CoreFoundation.CGFloat
  @objc @IBInspectable @_Concurrency.MainActor @preconcurrency public var animationDuration: CoreFoundation.CGFloat
  @objc @IBInspectable @_Concurrency.MainActor @preconcurrency public var trackColor: UIKit.UIColor
  @objc @IBInspectable @_Concurrency.MainActor @preconcurrency public var circleColor: UIKit.UIColor
  @objc @IBInspectable @_Concurrency.MainActor @preconcurrency public var changeColor: UIKit.UIColor
  @_Concurrency.MainActor @preconcurrency public var isToRemoveLayerAfterCompletion: Swift.Bool
  @_Concurrency.MainActor @preconcurrency public var circleLayer: QuartzCore.CAShapeLayer
  @_Concurrency.MainActor @preconcurrency public var trackLayer: QuartzCore.CAShapeLayer
  @_Concurrency.MainActor @preconcurrency public func createLayer(cricleColor: UIKit.UIColor)
  @_Concurrency.MainActor @preconcurrency public func animateCircle(angle: CoreFoundation.CGFloat, animationDuration: CoreFoundation.CGFloat, cricleColor: UIKit.UIColor)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
extension InstaCardFramework.JKCircleView : QuartzCore.CAAnimationDelegate {
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func animationDidStop(_ anim: QuartzCore.CAAnimation, finished flag: Swift.Bool)
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func animationDidStart(_ anim: QuartzCore.CAAnimation)
}
public typealias EmptyCompletion = () -> Swift.Void
public typealias CompletionObject<T> = (_ response: T) -> Swift.Void
public typealias CompletionOptionalObject<T> = (_ response: T?) -> Swift.Void
public typealias CompletionResponse = (_ response: Swift.Result<Swift.Void, any Swift.Error>) -> Swift.Void
public typealias completionBooleanObject<T> = (_ Bool: T?) -> Swift.Void
@_hasMissingDesignatedInitializers public class InstaSDKManager {
  public static let shared: InstaCardFramework.InstaSDKManager
  public func initializeSDK(withAPIKey key: Swift.String)
  public func setCustomFonts(fonts: [UIKit.UIFont.TextStyle : Swift.String])
  public func launchSDK(from viewController: UIKit.UIViewController)
  @objc deinit
}
@_hasMissingDesignatedInitializers public class ResourceManager {
  public static func image(named name: Swift.String) -> UIKit.UIImage?
  @objc deinit
}
